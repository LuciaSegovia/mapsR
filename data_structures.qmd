# Data Structures

A data structure in R is an R object which holds one or more data objects, a data object will be a data type, such as we have encountered in section 1 (numeric, character, etc).  In this script we introduce vectors, factors, matrices, data frames and lists. The examples and exercises should help you to understandbetter how R holds and manages data.

## Vectors

A vector is a series of values of a variable (e.g. pH value measurements from a sensor). The easiest  way to form a vector of values in R is with the `"combine"` function `c()`.
An example of a vector of numeric values (pH readings) is shown below:

```{r eval=TRUE}
pH_values <- c(5.6, 5.5, 5.0, 5.7, 5.4, 5.3, 6.0, 6.7, 6.5, 6.4, 6.2, 6.3)
```

We can count the number of items in a vector with the `length()` function:

```{r eval=TRUE}
length(pH_values)
```

Each item in a vector can be referenced by its index (i.e. its position in the sequence of values), 
and we can pull out a particular item using the square brackets after the vector name.  For example,
the `7th` item in pH_values can be accessed like this

```{r eval=TRUE}
pH_values[7]
```


A vector is a "homogeneous" data structure.  You could make a vector of logical values or of numeric values or of character values, but not a vector which has a mixture. 

See what happens if you try:

```{r eval=TRUE}
mixture <- c(5.2, TRUE, "CA")
print(mixture)
```

everything is turned into a character, and so appears in quotation marks.  You could not perform arithmetic on the first object in the vector, as you can see if you try:

```{r}
sqrt(mixture[1])
```

The operations that we have applied above to scalar data types can be applied to vectors.  So, for
example, see what happens with the R command

```{r eval=TRUE}
print(2*pH_values)
```

the operation is applied to every element in the vector, and the output is a vector.

There are other functions that we can apply to vectors for example

```{r eval=TRUE}
mean_pH <- mean(pH_values) 
print(mean_pH)
```

:::{.callout-note}
## Excercise
Explore what the functions `sum()` and `median()` do using the `pH_values` vector
:::

A conditional operation applied to a vector will produce a vector of logical values

```{r eval=TRUE}
pH_le_6 <- pH_values <= 6.0
print(pH_le_6)
``` 

The `which()` function, applied to a vector, will extract the index values for all values in the 
vector which meet certain conditions, e.g.:

```{r eval=TRUE}
index_lt_6 <- which(pH_values<6)
print(index_lt_6)
```

we can use this vector of index values to extract the pH values which meet the condition into
a new vector:

```{r eval=TRUE}
small_pH_values <- pH_values[index_lt_6]
print(small_pH_values)
```	

:::{.callout-note}
## Exercise
Extract into a new vector the values of `pH` which exceed `5.6`	
:::


If we use the multiplication operation on two vectors, `a` and `b`, which are the same length...

```{r eval=TRUE}
a<-c(1,2,3,4,5)

b<-c(1,10,100,1000,10000)

c<-a*b

print(c)
```

... then the output, `c`, is a vector of the same length as `a` or `b`, where `c[i]= a[i]*b[i]`. If `a` and `b` were of different length you would get an error message.

:::{.callout-tip}
Note that this is not a standard product of vectors from matrix algebra.
:::

There are various useful commands for creating vectors, `rep()` is one of the best.A assume that our pH values are drawn from six soil samples which are `sands (S)` and six which are `clay loam (CL)`.  We can make a vector of character values which corresponds to the pH data with the following command:

```{r eval=TRUE}
soil_type <- rep(c("S","CL"),each=6)

print(soil_type)
```

and you could then extract the index of the clay loams:

```{r eval=TRUE}
clay_loam_index <- which(soil_type=="CL")
```

... and then extract the pH values for the clay loam soils

```{r eval=TRUE}
pH_clay_loam <- pH_values[clay_loam_index]
```

:::{.callout-note}
## Exercise
Compare the output of the rep commands below, in order to work out what `"times" `and `"each"` are doing

```{r eval=TRUE}
rep(c("CA","Conv"),times=6)

rep(c("CA","Conv"),each=6)

rep(c("CA","Conv"),each=2,times=3)

rep(c("CA","Conv"),times=1:2)
```

Use `rep` to produce a vector of treatment labels for an experiment in which conservation agriculture `(CA)` and conventional `(Conv)` treatments are applied, with six reps of each in 6 blocks.  Produce a corresponding vector of block labels.
:::

## Factors

In the previous section we introduced the idea of vectors of character variables as treatment labels. However, in order to be most useful, such a vector needs to be turned into a factor. A factor is a variable which is not a continuous number, or is not treated as one.  It is a label for some variable controlled at different levels in an experiment, so a factor might be Nitrogen (application rate) with levels `0`, `50` and `100 kg/ha`, or it might be Variety with levels `AB_123`, `AB_234`, `CD_120`, `CD_130`.  When we first set up a vector of `N` rates these could be numeric, the Varieties will be made character variables because they contain letters. In both cases, however, we are likely to want the variable to be turned into a factor for use in an analysis of variance, for example.The example below sets up two vectors with levels for these factors in an experiment with the two factors in factorial combination (giving 12 treatments) and with four replicates of each treatment in randomized blocks

```{r eval=TRUE}
Nitrogen <- rep(c(0,50,100),16)
Variety <- rep(c("AB_123", "AB_234", "CD_120", "CD_130"),each=3,times=4)
Blocks <- rep(c("Block_1","Block_2","Block_3","Block_4"),each=12)
```

The `cbind` command below will print out these vectors as columns in a matrix of character values
it is easy to see how the twelve combinations of the two factor levels are structured in each block

```{r eval=TRUE}
cbind(Blocks,Variety,Nitrogen)
```

Now use the `factor()` function to create factor data structures.

```{r}
Nitrogen_factor<-factor(Nitrogen)
print(Nitrogen_factor)

Variety_factor<-factor(Variety)
print(Variety_factor)

Block_factor<-factor(Blocks)
print(Block_factor)

```
Note that a `factor` is actually a vector, but with an associated list of `levels`, always presented in alpha-numeric order.  These are used by `R` functions such as `lm()` which does linear modelling, such as the analysis of variance.  We shall see how factors can be used in the later section on data frames.


:::{.callout-note}
## Exercise	
An experiment has been set up to examine the combined effects of zero till vs conventional
tillage with intercropping vs monocropping.  The experiment is designed with randomized complete blocks, 
each of five blocks contains one replicate of each treatment.  Following the example above, set up the 
three factors required to represent one season of this experiment.
:::

## Matrices

A matrix is a rectangular array of values, arranged in `rows` and `columns`.  A vector is therefore a type of matrix with just one column.  We can create a matrix in `R` in one of two main ways.  The first is the matrix command:

```{r eval=TRUE}
M1 <- matrix(1:6,3,2)
print(M1)
```

The first term in the command is a vector of numbers, 1 to 6, the second is the number 
rows in the matrix and the third is the number of columns.  Note that we always refer 
to an entry in the matrix by the `ROW` first and the `COLUMN` second.  As an exercise, look
at the effect of swapping 3 and 2 round in the command above.  Note also that the command
enters the terms down the first column then down the second, so that the first column of
M1 goes 1,2,3 and the second 4, 5, 6.


The second way to make a `matrix` in `R` is to `"bind"` some vectors together, which works only
if they are the same length.  If we start with 2 vectors:
    
```{r eval=TRUE}
a <- c(2,4,5)
b <- c(4,7,10)
```

.. then we can make a `3 x 2 matrix` (remember that means `3` rows and `2` columns) with the
`cbind()` command (for binding the vectors as columns of the matrix):

```{r eval=TRUE}
M2 <- cbind(a,b)
print(M2) 
```

... and we could make a `2 x 3 matrix` with the `rbind()` command (for binding the vectors as 
rows of the matrix):

```{r eval=TRUE}
M3 <- rbind(a,b)
print(M3) 
```

Note that the vector names become column or row names of the matrix.  You can look at these
names with the colnames or rownames command, and also use these to change the names:

```{r eval=TRUE}
colnames(M2)

colnames(M2) <- c("Column_1","Column_2")

colnames(M2)
```

We can refer to a particular cell of a matrix as follows

```{r eval=TRUE}
M2[2,2]
```
.. and we can refer to a particular column of the matrix as follows

```{r eval=TRUE}
M2[,2]
```

For example, to find the sum of the first column of `M2` ..

```{r eval=TRUE}
Sum_Col_1 <- sum(M2[,1])

print(Sum_Col_1)
```

:::{.callout-note}
## Exercise
Take the vectors below (from an exercise above) which contain gravimetric water content and bulk density of ten soils.  Combine these two as columns in a matrix and then change the column names to `"Gravimetric_water"` and `"Bulk_density"`.

```{r eval=TRUE}
gwc <- c(0.4,0.5,0.3,0.2,0.5,0.6,0.3,0.2,0.4,0.3)
rho <- c(1.05,1.42,1.50,1.65,1.44,0.90,1.35,1.36,1.10,1.43)
gr <- cbind(gwc,rho)

colnames(gr)<-c("Gravimetric_water","Bulk_density")
```
When that is done, extract the mean value of bulk density from the matrix.

:::

## Data frames 

A `matrix` or a `vector` is a "homogeneous" data structure, which means you can't mix data types.
Consider the previous example, we have a `vector` of numeric data on soil pH:

```{r eval=TRUE}
pH_values<-c(5.6, 5.5, 5.0, 5.7, 5.4, 5.3, 6.0, 6.7, 6.5, 6.4, 6.2, 6.3)
```
... and a corresponding vector of character values on the soil texture class for
each sample

```{r eval=TRUE}
soil_type<-rep(c("S","CL"),each=6)
```

.. and then attempt to put the character and the numeric vector into a matrix:

```{r eval=TRUE}
combined_data<-cbind(soil_type,pH_values)
# print the outcome..
print(combined_data)
```

We can can see that the pH values are now character, a string `"5.6"` which could not
be used in calculations.

Let us see what happens if we convert soil type to a factor first..
```{r eval=TRUE}
soil_type <- factor(soil_type)
combined_data <- cbind(soil_type,pH_values)

#print the outcome..
print(combined_data)
```

... the factor values have been converted to numeric ones (label 1 goes to the factor whose original name came first in alphabetical order ("CL").  

This is why matrices, while important for many applications, are not the most basic data structure in `R`.  The data frame serves this purpose, which is why we will generally use commands such as `read.table` or `read.csv` to read data from external files into an R data frame

We can turn our two vectors into a data frame as follows:
```{r eval=TRUE}
combined.df <- data.frame(
    soil_type=soil_type,
    pH_values=pH_values,
    stringsAsFactors = TRUE
    )
```

The option `"stringsAsFactors = TRUE"` tells `R` that soil_type should be treated as a factor.

We can reference the data object inside the data frame using the dollar notation, `combined.df$soil_type` so we can confirm that soil_type is indeed a factor in the data frame as follows.

```{r eval=TRUE}
print(combined.df$soil_type)
```

We now have a `data frame` in which the `soil_type` variable is a `factor` and the `pH_values` are `numeric`: just what we need.

```{r eval=TRUE}
print(combined.df)
```

This allows us to do some interesting things.  For example, make a `boxplot` of `pH` within each level of the factor

```{r eval=TRUE}
boxplot(pH_values~soil_type,data=combined.df)
```

... or to extract the `mean` value of `pH` for each `level` of the `factor`

```{r eval=TRUE}
by(combined.df$pH_values,combined.df$soil_type,mean)
```

... or to do a t-test to compare the mean pH values

```{r eval=TRUE}
t.test(pH_values~soil_type,data=combined.df)
```

:::{.callout-tip}
Note that the terms in brackets for t.test and boxplot are identical.  They are:
a)  formula saying express the first variable in terms of different levels of the factor and
a)  a data statement pointing R to the data frame where it will find the variables with
the specified names.
:::	

:::{.callout-note}
## Exercise
1)  Find the mean of all the `pH` values in `combined.df`
1)	Find the median values of `pH` in the two textural classes
:::	



Three useful `R` commands, which can be applied to data frames and are particularly useful when
examining one created by reading in data are `names()`, `head()` and `nrow()`.  Apply these to 
combined.df in order to work out what they do.

```{r eval=TRUE}
names(combined.df)
head(combined.df)
nrow(combined.df)
```
The `colnames()` command can be used either to show or to set the column names (as for matrices)

```{r eval=TRUE}
colnames(combined.df)
```

:::{.callout-note}
## Exercise
The two sets of values below are, respectively, the bulk density of 20 different
topsoil samples and their textural class: sandy loam (SL) or silt loam (KL).

```{r eval=TRUE}
bulk_density <- c(1.46,1.44,1.43,1.42,0.96,1.3,1.48,1.22,1.41,1.5,1.27,
1.21,1.23,1.16,1.27,1.37,1.07,1.16,1.04,1.42)

# textural_class <- c("SL","SL","SL",SL,SL,SL,SL,SL,SL,SL,KL,KL,KL,KL,KL,KL,KL,KL,KL,KL)
textural_class <- rep(c("SL","KL"),each=10)
  
df <- data.frame(
    bulk_density=bulk_density,
    textural_class=textural_class,
    stringsAsFactors = TRUE
    )

print(df)
``` 

Make a data frame in which textural class is a factor and bulk density is a numerical variable
Give each column an appropriate name then:
i) produce a boxplot of bulk density in the twotexture classes 
i) compute the mean bulk density over all the data and 
i) compute the mean bulk density for each textural class separately then 
i) conduct a t-test to compare the two textural classes with respect to bulk density.
:::
  
## Lists

A list in R is a vector of data objects.  It can be a useful structure for holding outputs from
analyses in a consistent format, and you might find that some packages you use produce lists as
outputs.

In this example we take three vectors of values and put them together in a list:

```{r eval=TRUE}
list_example <- list("some_numbers"=c(1,2,3,4), 
"some_odd_numbers"=c(1,3,5,7), 
"some_even_numbers"=c(2,4,6,8))

print(list_example)
```

The three components of the list are referred to as list "slices"
You can use the name of a slice and the dollar notation to refer to a particular slice

```{r eval=TRUE}
list_example$some_even_numbers
```

and because a slice is a vector you can refer to a single element of it by its `index` (order in the
vector) and the square brackets notation:
```{r eval=TRUE}
list_example$some_even_numbers[3]
```

Alternatively, you can refer to slices of a list by using the double square bracket with an index
(for the first, second... slice).  For example, an alternative way to reference the vector 
`"some_even_numbers"`, which is the third slice, is as follows

```{r eval=TRUE}
list_example[[3]]
```

.. and you can refer to an element of this vector thus

```{r eval=TRUE}
list_example[[3]][4]
```

For example, one may change the value of the fourth element in the third slice as follows

```{r eval=TRUE}
list_example[[3]][4]<-10
```

:::{.callout-note}
##  Home Exercise
Produce a list object based on the data in the last exercise which contains the following slices. 

i)  all the bulk density data  
i)  the list of corresponding textural classes 
i)  the mean bulk density over all the data and 
i)  the mean bulk densities for the two classes.
:::
