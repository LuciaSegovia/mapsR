# Data Wrangling

## Subsetting 

### Subsetting data frames
There are a number of operators that can be used to extract subsets of R objects.

-  `[]` always returns an object of the same class as the original; can be used to select more than one element (there is one exception)
-  `[[]]` is used to extract elements of a list or a data frame; it can only be used to extract a single element and the class of the returned object will not necessarily be a list or data frame
-  `$` is used to extract elements of a `list` or data frame by name; semantics are similar to that of `[[]]`.

:::{.callout-tip}
## Data frames refresher
-  Data frames are used to store tabular data
-  They are represented as a special type of list where every element of the list has to have the same length
-  Each element of the list can be thought of as a column and the length of each element of the list is the number of rows
-  Unlike matrices, data frames can store different classes of objects in each column (just like lists); matrices must have every element be the same class
-  Data frames also have a special attribute called row.names
-  Data frames are usually created by calling `read.table()` or `read.csv()`
-  Can be converted to a matrix by calling `data.matrix()`

```{r eval=TRUE}
# Creating and exploring a dataframe
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
```
:::

**Data Frame Subsetting**
If provided with a single value, data frames assume you want to subset a column or columns - multiple values then the data frame is treated as a matrix.

```{r eval=TRUE}
# create a data frame
df = data.frame(a = 1:2, b = 3:4) 

# returns an object of the same class as the original
df[1] 

# class of the returned object will not necessarily be a list or data frame
df[[1]] 

# class of the returned object will not necessarily be a list or data frame
df[, "a"] 

# returns an object of the same class as the original
df["a"] 

# returns an object of the same class as the original
df[, "a", drop = FALSE] 


df[1, ] 

df[c("a","b","a")]
```

**Subsetting a single column from a data frame**

Let's load in yielddata into a data frame. This contains the 100 grain weight of maize grain at ZARI. 
The data are on planting dates, nitrogen fertilizer rates (`n1`, `n2`, `n3`) & maize cultivars (`v1`, `v2`, `v3`). Using the `str` command, we find that there are 81 observations in this data frame

```{r eval=TRUE}
#load the yielddata dataset
data.df <- read.csv("data/yielddata.csv",header=T,stringsAsFactors=T)
# display the first 6 rows of the data frame
head(data.df)
# check the structure of the data 
str(data.df)  
```

Let's try to get One Column after from the data frame named `yielddata` loaded into R, we can take subsets of these 81 observations. First, let's assume we just want to pull out the column of `rep`, `pd`, `variety`, `nrate` & `x_100_grain_wt`. There are two ways we can do this: 
-  specifying the column by name, or specifying 
-  the column by its order of appearance. 

The general form for pulling information from data frames is `data.frame[rows,columns]`. it follows that you can get the first column in either of these two ways:

```{r eval=TRUE}
# get all rows, but only the third column
data.df[ ,3]         
# get all rows, and only the column named "pd"
data.df[ ,c("pd")]   
```
**Subsetting multiple columns from a data frame**
If you want more than one column, you can specify the column numbers or the names of the variables that you want to extract. For example if you want to get the `pd`, `variety`, & `nrate` columns, you would do this:

```{r eval=TRUE}
# get all rows, but only 3rd and 4th columns
data.df[,c(3,4)]  

# get all rows, only "pd" & "variety" columns              
data.df[,c("pd","variety")]    
```

If you want more than one column and those columns are next to each other, you can do this:
```{r eval=TRUE}
data.df[,c(2:6)]
```

**Getting One Row**
You can get the first row similarly to how you got the first column, and any other row the same way:
```{r eval=TRUE}
# get first row, and all columns
data.df[1,]   
# get 72nd row, and all columns      
data.df[72,]        
```
**Getting Multiple Rows**
If you want more than one row, you can specify the row numbers you want like this:
```{r eval=TRUE}
data.df[c(1:3,5,6),]
```

:::{.callout-note}
## Exercise 
Try to get `row (10 to 41)` and `columns (2 to 5)` from the `yielddata` dataset
:::



### Subsetting Lists

```{r eval=TRUE}
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
```

```{r eval=TRUE}
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x
x[c(1, 3)]
```

The `[[]]` operator can be used with computed indices; $ can only be used with literal names.
```{r eval=TRUE}
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"
# computed index for 'foo'
x[[name]] 
# element 'name' doesn't exist!
x$name 
x$foo
```

**Subsetting Nested Elements of a List**
The `[[]]` can take an integer sequence.
```{r eval=TRUE}
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x
x[[c(1, 3)]]
x[[1]][[3]]
x[[c(2, 1)]]
```

### Subsetting a Matrix
Matrices can be subsetted in the usual way with `(i,j)` type indices. Indices can also be missing. e.g. `x[1, ]` reads rows only, `x[, 2]` reads columns only.

```{r eval=TRUE}
x <- matrix(1:6, 2, 3)
x
x[1, 2] # R reads rows first and columns second
x[2, 1] # Reads both rows, columns

# Indices can also be missing.
x[1, ]  # Reads rows only
x[, 2]  # Reads columns only
```

By default, when a single element of a matrix is retrieved, it is returned as a vector of length 1 rather than a 1 ? 1 matrix. This behavior can be turned off by setting `drop = FALSE`.

```{r eval=TRUE}
x <- matrix(1:6, 2, 3)
x
x[1, 2]
x[1, 2, drop = FALSE]
```

Similarly, subsetting a single column or a single row will give you a vector, not a matrix (by default).
  
```{r eval=TRUE}
x <- matrix(1:6, 2, 3)
x
x[1, ] # displays all first row and all columns
x[1, , drop = FALSE]
```

Partial matching of names is allowed with `[[]]` and `$`.
  
```{r eval=TRUE}
x <- list(aardvark = 1:5)
x
x$a
x[["a"]]
x[["a", exact = FALSE]]
```

### Subsetting a Vector
Vectors are basic objects in R and they can be subsetted using the `[]` operator.
  
```{r eval=TRUE}
x <- c("a", "b", "c", "c", "d", "a")
# Extract the first element
x[1] 
# Extract the second element
x[2] 
```

The `[]` operator can be used to extract multiple elements of a vector by passing the operator an integer sequence. Here we extract the first four elements of the vector.
```{r eval=TRUE}
x[1:4]
```

The sequence does not have to be in order; you can specify any arbitrary integer vector.
```{r eval=TRUE}
x[c(1, 3, 4)]
```

We can also pass a logical sequence to the `[]` operator to extract elements of a vector that satisfy a given condition. For example, here we want the elements of x that come lexicographically after the letter a.

```{r eval=TRUE}
u <- x > "a"
u
# this displays all the elements fulfiling the condition
x[u]  
```

Another, more compact, way to do this would be to skip the creation of a logical vector and just subset the vector directly with the logical expression.
```{r eval=TRUE}
x[x > "a"]
```

It's frequently necessary to extract some of the elements of a larger vector.In R you can use square brackets to select an individual element or group of elements:
```{r eval=TRUE}
x <- c(5,9,2,14,-4)
x[3]
```

:::{.callout-tip}
## note indexing starts from 1

```{r eval=TRUE}
x[c(2,3,5)]
x[1:3]
x[3:length(x)]
```


There are two other methods for getting subvectors. The first is using a logical vector (i.e. containing `TRUE` and `FALSE`) of the same length:
```{r eval=TRUE}
x > 4
x[x > 4]
```

or using negative indices to specify which elements should not be selected:
```{r eval=TRUE}
x[-1]
x[-c(1,4)]
```

:::{.callout-warning}
Note that this is rather different to what other languages such as `C` or `Python` would interpret negative indices to mean.)
:::
:::

:::{.callout-note}
## Exercise 
The built-in vector `LETTERS` contains the uppercase letters of the alphabet. Produce a vector of 

(i) the first 12 letters; 
(ii) the odd 'numbered' letters; 
(iii) the **English** consonants.
:::

### Removing NA Values
Here we will use a `complete.cases` function in R. Find Complete Cases returns a logical vector indicating which cases are complete, i.e., have no missing values or `NAs`.

```{r}
# read the help pages on how to use the complete.cases function
?complete.cases
```

A common task is to remove missing values (NAs).
```{r eval=TRUE}
# Create a vector with some missing values
x <- c(1, 2, NA, 4, NA, 5) 
# Create a logical vector indicating which elements are missing
bad <- is.na(x)
# Use the logical vector to subset the original vector
x[!bad]
```

What if there are multiple things and you want to take the subset with no missing values?
```{r eval=TRUE}
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x, y)
x[good]
y[good]
```

Let's use `airquality`, one of R's built in datasets.
```{r eval=TRUE}
# Load the airquality dataset and this shows the first six rows
airquality[1:6, ] 
good <- complete.cases(airquality)
# all rows containing an NA are removed completely
airquality[good, ][1:6, ] 
```

:::{.callout-note}
## Exercise
Write a script to remove NAs from `airquality` using columns
:::


### Subsetting a factor
Factors are used to represent categorical variables with fixed possible values. Factors can be created with the `factor` function. The levels of a factor are the possible values it can take; by default these are ordered alphabetically. The `levels` function can be used to get (and set) the levels of a factor.

:::{.callout-tip}
## R factors recap
-  Factors are the data objects which are used to categorize the data and store it as levels.
-  They can store both strings and integers. 
-  They are useful in the columns which have a limited number of unique values. 
-  Like `"Male"`, `"Female"` and `True`, `False` etc. 
-  They are useful in data analysis for statistical modeling.
-  Factors are created using the `factor()` function by taking a vector as input
:::

```{r eval=TRUE}
# As an example, let's create a vector as input
data <- c("East","West","East","North","North","East","West","West","West","East","North")
# print the data
print(data)
# check if the data as a factor
print(is.factor(data))
```

Apply the factor function on the vector data we created.
```{r eval=TRUE}
# we are applying the factor() function to data
factor_data <- factor(data) 
# save the data into the `factor_data`

print(factor_data)
print(is.factor(factor_data))
```



#### Factors in Data Frame
On creating any data frame with a column of text data, R treats the text column as categorical data and creates factors on it.

```{r eval=TRUE}
# Create the vectors for data frame.
height <- c(132,151,162,139,166,147,122)
weight <- c(48,49,66,53,67,52,40)
gender <- c("male","male","female","female","male","female","male")

# Create the data frame.
input_data <- data.frame(height, weight, gender)
print(input_data)

# Test if the gender column is a factor.
print(is.factor(input_data$gender))

# Change the gender column to a factor.
input_data$gender <- factor(input_data$gender)

# Print the gender column so see the levels.
print(input_data$gender)
```


#### Changing the Order of Levels
The order of the `levels` in a `factor` can be changed by applying the `factor()` function again with new order of the levels.
  
```{r eval=TRUE}
# Create the vector for data frame.

data <- c("East", "West", "East", "North", "North", "East",
          "West", "West", "West", "East", "North")

# Create the factors
factor_data <- factor(data)
print(factor_data)

# Apply the factor function with required order of the level.
new_order_data <- factor(factor_data,levels = c("East","West","North"))
print(new_order_data)
```


#### Generating Factor Levels
We can generate factor levels by using the `gl()` function. It takes two integers as input which indicates how many levels and how many times each level. e.g. `gl(n, k, labels)` where:

-  `n` is a integer giving the number of levels.
-  `k` is a integer giving the number of replications.
-  `labels` is a vector of labels for the resulting factor levels.

For example, if we want to create a factor with 3 levels and each level should be repeated 4 times, we can use the following code.

```{r eval=TRUE}
v <- gl(3, 4, labels = c("Chitedze", "Liempe", "Domboshava"))
print(v)
```

You can subset factors in a similar way that you subset vectors. As usual, `[ ]` is the key! However, R has some interesting behavior when you want to remove a factor level from your analysis.For example to subset the first name from the above example

```{r eval=TRUE}
# select the first name still returns all the levels
v[1]        

# using the drop=TRUE only gives the desired factor & levels      
v[1, drop=TRUE]   

# select the first 2 names but still returns all the levels
v[1:7]      

# using the drop=TRUE only gives the desired factor & levels      
v[1:7, drop=TRUE]   
```

Another example of subsetting a factor is shown below.

```{r eval=TRUE}

# Factor Subsetting
(x = factor(c("BS", "MS", "PhD", "MS")))

x[1:2]
```
R selects the `BS` `MS` at the first and second position, but left the `MS` level behind. A better plan would have been to tell R to drop the `PhD` level entirely. To do that, add `drop = TRUE` to the subsetting command.

```{r eval=TRUE}

x[1:2, drop=TRUE]
```
