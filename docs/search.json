[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mapsR: A guide to data analysis with R",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "index.html#about-this-manual",
    "href": "index.html#about-this-manual",
    "title": "mapsR: A guide to data analysis with R",
    "section": "About this manual",
    "text": "About this manual\nThis manual is designed for absolute beginners who are interested in using R and RStudio. The manual is an adaptation of materials for statistical analysis of soil and related data from agricultural and environmental surveys and experiments developed by the Capacity for Conservation Agriculture Research (CEPHaS) project and made available to all for use, without warranty or liability. The CEPHaS project is funded by the UK Research and Innovation Global Challenges Research Fund (UKRI GCRF).\nComplilation of this manual is made possible by the Micronutrient Action Poicy Support (MAPS) project team, funded by the Bill and Melinda Gates Foundation. This complilation is made available to all for use, without warranty or liability."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "mapsR: A guide to data analysis with R",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis manual is a collaborative effort between the CEPHaS and MAPS projects. We would like to thank the following people for their contributions to this manual: Liberty Mlambo, Murray Lark, Louise E. Ander, Hakunawadi Pswarayi, Tineka Blake, Chris Chagumaira"
  },
  {
    "objectID": "index.html#who-is-this-manual-for",
    "href": "index.html#who-is-this-manual-for",
    "title": "mapsR: A guide to data analysis with R",
    "section": "Who is this manual for?",
    "text": "Who is this manual for?\nThe goal of this manual is to provide a comprehensive introduction to these powerful technologies and to teach you how to use them to better understand your data and collaborate with others on your project.\nThroughout this manual, you will learn how to install and set up R and RStudio on your computer, as well as how to use them to perform data analysis, create visualizations, and manage your code. The manual includes step-by-step instructions, examples, and practice exercises to help you master these technologies.\nWhether you are a researcher, data scientist, or statistician, this manual will provide you with the skills and knowledge you need to start using R and RStudio, to better understand your data and collaborate with others on your project.\nIt is important to note that this manual is not a comprehensive guide to R and RStudio but rather an introduction, designed to give you the foundational knowledge to start working with these technologies. There are many other resources available for learning more about these technologies, including online tutorials, forums, and documentation.\nWe hope you find this manual helpful and that it empowers you to work with these powerful tools."
  },
  {
    "objectID": "data_types.html#introduction",
    "href": "data_types.html#introduction",
    "title": "2  Data Types",
    "section": "Introduction",
    "text": "Introduction\nThe objective of this section is to provide information on the topic under consideration, along with examples and exercises. You should be able to work through it in R or R studio. This particular section requires no additional functions or packages to be loaded.\nThe specific objective of the material in this section is to introduce you to the principal data types and data structures in R. By the end you should have a better understanding of the R scripts, and should be better-placed to start developing and editing scripts yourself. The particular topics we shall cover are:\n\nBasic data types in R: numeric, character, and logical\nData structures: vectors.\n\nFactors\nData structures: Matrices, making matrices, matrix operations\nData structures: Dataframes\nData structures: Lists\n\nThe principal data types in R are numeric, character, factor and logical. There are others, but these are the main ones.\n\nA datum of type numeric is a numerical value, such as a soil pH value.\nA datum of type character is a string of characters, such as the name of an experiment.\nA datum of type factor is the label for a set of treatments or categories which we might use in an analysis of variance.\n\nA datum of type logical takes values TRUE or FALSE"
  },
  {
    "objectID": "data_types.html#numeric-data",
    "href": "data_types.html#numeric-data",
    "title": "2  Data Types",
    "section": "Numeric data",
    "text": "Numeric data\n\nScalar:\nBefore going into details of data types, we introduce the simplest data type in R, the scalar. A scalar is a single value of some variable, e.g. the value 42, or the name \"Bert\".\nWe can make a simple scalar value using the <- “assign” arrow in R. Assignment is simply the association of a name (mass) with an object (the value 1000).\n\nmass<-1000\n\nThis is a numeric scalar value. We can then use the print command to see the value of the scalar\n\nprint(mass)\n\nWe can then do simple mathematical manipulations with a numeric scalar value. For example, the following will convert the mass, if this is in grams, to kg\n\nmass_kg <- mass/1000\n\nso you can see that the back-slash / denotes division of the value to the left by the value to the right. As in most computer languages * denotes multiply, so to convert mass to milligrams we would do the following\n\nmass_mg<-mass*1000\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a scalar value which is your age at last birthday then, assuming that there are 52 weeks in each year, calculate your age in weeks and assign this value to a scalar called my_age\n\n\nHere are some simple operations which we can perform on a numeric scalar in R using inbuilt functions\n\n\nSquare root\n\nsroot_mass<-sqrt(mass)\n\n\n\nLogarithm (natural or Napierian logarithm to base e)\n\nlog_mass<-log(mass)\n\n\n\nRaising to a power\n\nmass_squared<-mass^2\n\n\n\n\n\n\n\nError Alert:\n\n\n\nRun the commands below with one parenthesis removed and see what happens\n\nsroot_mass<-sqrt(mass\n\n\n\n\n\n\n\n\n\nExercise: Operator precedence\n\n\n\n\nYou may recall from school that, when faced with a string of operations, e.g you do the operations in a certain order, completing calculations inside brackets first. R follows a standard order of precedence in operations. Using the rules from school work out the correct answer to the expression above, and then assign its value in R to a new numeric scalar, and see if you were correct.\n\n\n10-4*(2+1)\n\n\nWork out the order of precedence in R for ^,-, +, * by examining the values assigned to numeric scalars by the following\n\n\n1+2*3\n3*2^2\n3*2^3-1"
  },
  {
    "objectID": "data_types.html#character-data",
    "href": "data_types.html#character-data",
    "title": "2  Data Types",
    "section": "Character data",
    "text": "Character data\nA character scalar is just a string of characters, for example, the name of a treatment\n\ntname<-\"Mulched\"\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the character string in the assignment is put inside double quotes. See what happens if you run the command above, but with the quotes removed.\n\n\nIt can be useful to use character scalars, as they can appear in commands such as those for data plots, and you can assign the value once, so, for example, the following commands would create a pane of three graphs based on two variables, (here on some random data). In each plot command (\"plot\" and \"hist\") \"xlab= \" specifies the name on the x-axis label, and similarly \"ylab=\" for the y-axis. One can put the label name in directly here, xlab=\"pH\", for example, but we can also put a character scalar here which has been given a value elswhere e.g.:\n\n#Assign variable names\nxname<-\"pH\"\nyname<-\"SOC\"\n#Create a pane of four plots\npar(mfrow=c(2,2))\n#Create some random data\nx<-runif(100,4,8)\ny<-rnorm(100,4,0.5)\n#Create the plots\nhist(x,xlab=xname,main=\"Histogram\")\nhist(y,xlab=yname,main=\"Histogram\")\nplot(x,y,xlab=xname,ylab=yname,pch=16,main=\"Scatterplot\")\n\nIf you were using the script to produce such plots from various variables you can see how using a character scalar saves you from having to type the same variable name into the function for each plot. Changing it once at the top ensures that you get the correct name in each case.\nUsing \"paste\" to combine character variables.\nImagine that I had a character scalar that denotes the block to which an experimental plot belongs in a RCBD experiment, and another one that denotes the treatment:\n\nblock<-\"Block1\"\ntreatment<-\"CA\"\n\nI can make a plot name by combining these two using paste. The \"sep\" term allows me to specify the separator between the two scalars:\n\nplot_lab<-paste(block,treatment,sep=\"_\")\nprint(plot_lab)\n\n\n\n\n\n\n\nEXERCISE (by yourself)\n\n\n\nCreate a character scalar that includes your name and then use paste to join thiswith your age in weeks(as computed in the section on numeric data types)."
  },
  {
    "objectID": "data_types.html#logical-data",
    "href": "data_types.html#logical-data",
    "title": "2  Data Types",
    "section": "Logical data",
    "text": "Logical data\nA logical scalar takes the value TRUE or FALSE. An R command which states some relation between two variables will have a logical value. For example, let us create two numeric scalars\n\nthree<-3\nfive<-5\n\nNow the R statement (three < five) will take the value TRUE, because the value of \"three\" is less than the value of \"five\", so\n\nthree_lt_five<-(three < five)\nprint(three_lt_five)\n\nthe command below will show that it is not the case that three<three\n\nthree_lt_three<-(three < three)\nprint(three_lt_three)\n\nbut <= (less than or equal to) gives us a different outcome\n\nthree_le_three<-(three <= three)\nprint(three_le_three)\n\nSome other useful “logical connectives” are == for \"equal to\" and != for \"not equal to\" and, of course, > for \"greater than\" and >= for “greater than or equal to”.\n\n\n\n\n\n\nWarning\n\n\n\nNote that == is used for \"equal to\", a single = will allocate the value of the scalar on the left to that on the right.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSatisfy yourself that the set of connectives described above behave as they do, using the scalars three and five above, and others of your creation.\n\n\nLogical variables can be the subject of logical functions, notably \"if .. then\" Consider the example below\n\nsoil_pH <- 4\n\nif(soil_pH < 5.5) {\n    management_option <- \"Lime\"\n    }else{\n        management_option<-\"No_lime\"\n        }\n\nIn the script above if soil_pH is less than 5.5 then the scalar management_option will be given the character value \"Lime\", otherwise it will be given the value \"No_lime\".\n\ntime <- 12.00\nif(time < 12) {\n    learning <- \"continue\" \n    }else{\n        learning_option <- \"take a break\"\n        }\n\nIn the script above if time is less than 12.00 then the scalar learning option will be given the character value \"continue\", otherwise it will be given the value \"take a break\".\nA logical variable can be defined on the basis of more than one logical condition, this can be done using the conditionals & for \"and\", | for \"or\" .&& and || are sometimes appliedto vectors of logical variables. Here is an example. We define three numeric scalars sand, silt and clay as the percent by mass of sand, silt and clay-sized particles in soil.\n\nsand <- 10\nsilt <- 20\nclay <- 70\n\nfirst, check that the values are consistent\n\nconsistent_particle_size <- ((sand + silt + clay) == 100)\nprint(consistent_particle_size)\n\nThe USDA soil texture class Clay contains soils with more than 40% clay AND less than 40% silt and less than 45% sand, so we can determine whether or not our soil belongs to class clay as follows\n\nis_clay <- (clay>40) | (silt<=40) | (sand<=45)\nprint(is_clay)\n\n\n\n\n\n\n\nExercise\n\n\n\n\ntry the commands out with some different (consistent) particle size values.\nmodify the commands above so as to compute a logical variable is_silty_clay. In the USDA texture triangle a soil is silty clay if the clay content is greater than 40% AND the silt content is greater than 40%:"
  }
]